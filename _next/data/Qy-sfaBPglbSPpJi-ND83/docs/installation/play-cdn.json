{"pageProps":{"code":["\n      <span class=\"token keyword\">type</span> DVM <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Contains handlers for DVM-to-DVM specific messages</span>\n          AppHandler\n\n          <span class=\"token comment\">// Periodically called and reported via the node's Health API.</span>\n          health<span class=\"token punctuation\">.</span>Checkable\n\n          <span class=\"token comment\">// Represents a handler that is called on connection.</span>\n          validators<span class=\"token punctuation\">.</span>Connector\n\n          <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span>\n              ctx <span class=\"token operator\">*</span>logique<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span>\n              dbManager manager<span class=\"token punctuation\">.</span>Manager<span class=\"token punctuation\">,</span>\n              genesisBytes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span>\n              upgradeBytes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span>\n              configBytes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span>\n              toEngine <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> Message<span class=\"token punctuation\">,</span>\n              fxs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Fx<span class=\"token punctuation\">,</span>\n              appSender AppSender<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n          <span class=\"token comment\">// Bootstrapping is called when bootstrapping starts.</span>\n          <span class=\"token function\">Bootstrapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n          <span class=\"token comment\">// Bootstrapped is called when bootstrapping finishes.</span>\n          <span class=\"token function\">Bootstrapped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n          <span class=\"token comment\">// Shutdown is called when the node is shutting down.</span>\n          <span class=\"token function\">Shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n          <span class=\"token comment\">// Version returns the version of the DVM.</span>\n          <span class=\"token function\">Version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\n          <span class=\"token comment\">// Each extension can specify how locking is managed for convenience.</span>\n          <span class=\"token function\">CreateStaticHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>HTTPHandler<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\n          <span class=\"token comment\">// Creates the HTTP handlers for custom chain network calls.</span>\n          <span class=\"token function\">CreateHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>HTTPHandler<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n      ","\n      <span class=\"token keyword\">type</span> ChainVM <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n          common<span class=\"token punctuation\">.</span>DVM\n          Getter\n          Parser\n\n          <span class=\"token comment\">// Throw if DVM doesn't want to issue a new block.</span>\n          <span class=\"token function\">BuildBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>logique<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\n          <span class=\"token comment\">// Notify the DVM of the currently preferred block.</span>\n          <span class=\"token function\">SetPreference</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\n          <span class=\"token comment\">// LastAccepted returns the ID of the last accepted block.</span>\n          <span class=\"token function\">LastAccepted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Getter defines the functionality for fetching a block by its ID.</span>\n      <span class=\"token keyword\">type</span> Getter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Attempt to load a block.</span>\n          <span class=\"token comment\">//</span>\n          <span class=\"token comment\">// Throw if the block does not exist.</span>\n          <span class=\"token comment\">//</span>\n          <span class=\"token function\">GetBlock</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>logique<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Parser defines the functionality for fetching a block by its bytes.</span>\n      <span class=\"token keyword\">type</span> Parser <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\n          <span class=\"token comment\">// The block should be represented by the full byte array.</span>\n          <span class=\"token function\">ParseBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>logique<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      ","\n      <span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n        singletonStatePrefix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singleton\"</span><span class=\"token punctuation\">)</span>\n        blockStatePrefix     <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"block\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token boolean\">_</span> State <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// State is a wrapper around djtx.SingleTonState and BlockState</span>\n    <span class=\"token keyword\">type</span> State <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// SingletonState is used to understand if db is initialized.</span>\n        djtx<span class=\"token punctuation\">.</span>SingletonState\n        BlockState\n\n        <span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n        <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">type</span> state <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n        djtx<span class=\"token punctuation\">.</span>SingletonState\n        BlockState\n\n        baseDB <span class=\"token operator\">*</span>versiondb<span class=\"token punctuation\">.</span>Database\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span>db database<span class=\"token punctuation\">.</span>Database<span class=\"token punctuation\">,</span> vm <span class=\"token operator\">*</span>VM<span class=\"token punctuation\">)</span> State <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// create a new baseDB</span>\n        baseDB <span class=\"token operator\">:=</span> versiondb<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// create a prefixed \"blockDB\" from baseDB</span>\n        blockDB <span class=\"token operator\">:=</span> prefixdb<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>blockStatePrefix<span class=\"token punctuation\">,</span> baseDB<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// create a prefixed \"singletonDB\" from baseDB</span>\n        singletonDB <span class=\"token operator\">:=</span> prefixdb<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>singletonStatePrefix<span class=\"token punctuation\">,</span> baseDB<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// return state with created sub state components</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">{</span>\n            BlockState<span class=\"token punctuation\">:</span>     <span class=\"token function\">NewBlockState</span><span class=\"token punctuation\">(</span>blockDB<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            SingletonState<span class=\"token punctuation\">:</span> djtx<span class=\"token punctuation\">.</span><span class=\"token function\">NewSingletonState</span><span class=\"token punctuation\">(</span>singletonDB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            baseDB<span class=\"token punctuation\">:</span>         baseDB<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Commit commits pending operations to baseDB</span>\n    <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>state<span class=\"token punctuation\">)</span> <span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>baseDB<span class=\"token punctuation\">.</span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Close closes the underlying base database</span>\n    <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>state<span class=\"token punctuation\">)</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>baseDB<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n      "]},"__N_SSG":true}